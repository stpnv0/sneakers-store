// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: product/product.proto

package product

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Product_AddSneaker_FullMethodName         = "/product.Product/AddSneaker"
	Product_GetSneakerByID_FullMethodName     = "/product.Product/GetSneakerByID"
	Product_GetSneakersByIDs_FullMethodName   = "/product.Product/GetSneakersByIDs"
	Product_GetAllSneakers_FullMethodName     = "/product.Product/GetAllSneakers"
	Product_DeleteSneaker_FullMethodName      = "/product.Product/DeleteSneaker"
	Product_GenerateUploadURL_FullMethodName  = "/product.Product/GenerateUploadURL"
	Product_UpdateProductImage_FullMethodName = "/product.Product/UpdateProductImage"
)

// ProductClient is the client API for Product service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProductClient interface {
	AddSneaker(ctx context.Context, in *AddSneakerRequest, opts ...grpc.CallOption) (*Sneaker, error)
	GetSneakerByID(ctx context.Context, in *GetSneakerByIDRequest, opts ...grpc.CallOption) (*Sneaker, error)
	GetSneakersByIDs(ctx context.Context, in *GetSneakersByIDsRequest, opts ...grpc.CallOption) (*GetSneakersByIDsResponse, error)
	GetAllSneakers(ctx context.Context, in *GetAllSneakersRequest, opts ...grpc.CallOption) (*GetAllSneakersResponse, error)
	DeleteSneaker(ctx context.Context, in *DeleteSneakerRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GenerateUploadURL(ctx context.Context, in *GenerateUploadURLRequest, opts ...grpc.CallOption) (*GenerateUploadURLResponse, error)
	UpdateProductImage(ctx context.Context, in *UpdateProductImageRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type productClient struct {
	cc grpc.ClientConnInterface
}

func NewProductClient(cc grpc.ClientConnInterface) ProductClient {
	return &productClient{cc}
}

func (c *productClient) AddSneaker(ctx context.Context, in *AddSneakerRequest, opts ...grpc.CallOption) (*Sneaker, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Sneaker)
	err := c.cc.Invoke(ctx, Product_AddSneaker_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productClient) GetSneakerByID(ctx context.Context, in *GetSneakerByIDRequest, opts ...grpc.CallOption) (*Sneaker, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Sneaker)
	err := c.cc.Invoke(ctx, Product_GetSneakerByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productClient) GetSneakersByIDs(ctx context.Context, in *GetSneakersByIDsRequest, opts ...grpc.CallOption) (*GetSneakersByIDsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetSneakersByIDsResponse)
	err := c.cc.Invoke(ctx, Product_GetSneakersByIDs_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productClient) GetAllSneakers(ctx context.Context, in *GetAllSneakersRequest, opts ...grpc.CallOption) (*GetAllSneakersResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAllSneakersResponse)
	err := c.cc.Invoke(ctx, Product_GetAllSneakers_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productClient) DeleteSneaker(ctx context.Context, in *DeleteSneakerRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Product_DeleteSneaker_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productClient) GenerateUploadURL(ctx context.Context, in *GenerateUploadURLRequest, opts ...grpc.CallOption) (*GenerateUploadURLResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GenerateUploadURLResponse)
	err := c.cc.Invoke(ctx, Product_GenerateUploadURL_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productClient) UpdateProductImage(ctx context.Context, in *UpdateProductImageRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Product_UpdateProductImage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProductServer is the server API for Product service.
// All implementations must embed UnimplementedProductServer
// for forward compatibility.
type ProductServer interface {
	AddSneaker(context.Context, *AddSneakerRequest) (*Sneaker, error)
	GetSneakerByID(context.Context, *GetSneakerByIDRequest) (*Sneaker, error)
	GetSneakersByIDs(context.Context, *GetSneakersByIDsRequest) (*GetSneakersByIDsResponse, error)
	GetAllSneakers(context.Context, *GetAllSneakersRequest) (*GetAllSneakersResponse, error)
	DeleteSneaker(context.Context, *DeleteSneakerRequest) (*emptypb.Empty, error)
	GenerateUploadURL(context.Context, *GenerateUploadURLRequest) (*GenerateUploadURLResponse, error)
	UpdateProductImage(context.Context, *UpdateProductImageRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedProductServer()
}

// UnimplementedProductServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedProductServer struct{}

func (UnimplementedProductServer) AddSneaker(context.Context, *AddSneakerRequest) (*Sneaker, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddSneaker not implemented")
}
func (UnimplementedProductServer) GetSneakerByID(context.Context, *GetSneakerByIDRequest) (*Sneaker, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSneakerByID not implemented")
}
func (UnimplementedProductServer) GetSneakersByIDs(context.Context, *GetSneakersByIDsRequest) (*GetSneakersByIDsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSneakersByIDs not implemented")
}
func (UnimplementedProductServer) GetAllSneakers(context.Context, *GetAllSneakersRequest) (*GetAllSneakersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllSneakers not implemented")
}
func (UnimplementedProductServer) DeleteSneaker(context.Context, *DeleteSneakerRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSneaker not implemented")
}
func (UnimplementedProductServer) GenerateUploadURL(context.Context, *GenerateUploadURLRequest) (*GenerateUploadURLResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateUploadURL not implemented")
}
func (UnimplementedProductServer) UpdateProductImage(context.Context, *UpdateProductImageRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateProductImage not implemented")
}
func (UnimplementedProductServer) mustEmbedUnimplementedProductServer() {}
func (UnimplementedProductServer) testEmbeddedByValue()                 {}

// UnsafeProductServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProductServer will
// result in compilation errors.
type UnsafeProductServer interface {
	mustEmbedUnimplementedProductServer()
}

func RegisterProductServer(s grpc.ServiceRegistrar, srv ProductServer) {
	// If the following call pancis, it indicates UnimplementedProductServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Product_ServiceDesc, srv)
}

func _Product_AddSneaker_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddSneakerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServer).AddSneaker(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Product_AddSneaker_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServer).AddSneaker(ctx, req.(*AddSneakerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Product_GetSneakerByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSneakerByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServer).GetSneakerByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Product_GetSneakerByID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServer).GetSneakerByID(ctx, req.(*GetSneakerByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Product_GetSneakersByIDs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSneakersByIDsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServer).GetSneakersByIDs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Product_GetSneakersByIDs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServer).GetSneakersByIDs(ctx, req.(*GetSneakersByIDsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Product_GetAllSneakers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllSneakersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServer).GetAllSneakers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Product_GetAllSneakers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServer).GetAllSneakers(ctx, req.(*GetAllSneakersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Product_DeleteSneaker_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteSneakerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServer).DeleteSneaker(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Product_DeleteSneaker_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServer).DeleteSneaker(ctx, req.(*DeleteSneakerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Product_GenerateUploadURL_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenerateUploadURLRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServer).GenerateUploadURL(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Product_GenerateUploadURL_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServer).GenerateUploadURL(ctx, req.(*GenerateUploadURLRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Product_UpdateProductImage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateProductImageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServer).UpdateProductImage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Product_UpdateProductImage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServer).UpdateProductImage(ctx, req.(*UpdateProductImageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Product_ServiceDesc is the grpc.ServiceDesc for Product service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Product_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "product.Product",
	HandlerType: (*ProductServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddSneaker",
			Handler:    _Product_AddSneaker_Handler,
		},
		{
			MethodName: "GetSneakerByID",
			Handler:    _Product_GetSneakerByID_Handler,
		},
		{
			MethodName: "GetSneakersByIDs",
			Handler:    _Product_GetSneakersByIDs_Handler,
		},
		{
			MethodName: "GetAllSneakers",
			Handler:    _Product_GetAllSneakers_Handler,
		},
		{
			MethodName: "DeleteSneaker",
			Handler:    _Product_DeleteSneaker_Handler,
		},
		{
			MethodName: "GenerateUploadURL",
			Handler:    _Product_GenerateUploadURL_Handler,
		},
		{
			MethodName: "UpdateProductImage",
			Handler:    _Product_UpdateProductImage_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "product/product.proto",
}
